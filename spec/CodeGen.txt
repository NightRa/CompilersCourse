
Code generation:
  Expr: Generate code, which is equivalent to pushing the expression's value onto the stack - a single push, no other effect.

  Const: push the const.
    LDC value
  Var: load the constant variable address, and load it pushing it into the stack.
    LDC Address
    IND
  Unary expression: push inner expr. and apply the operation, resulting in a new single value pushed.
    <Push inner expr.>
    Unary op.
  Binary expression: push first expr, push second expr, apply the op, consuming the 2 values, and pushing a single value of the expr. overall.
    <Push left  expr.>
    <Push right expr.>
    Binary op.

  Statement: Starts with an empty stack, and ends with an empty stack.

  Print: push expr, consume the value.
    <Push expr.>
    Print
  If: push condition, consume condition with FalseJump to after the if block, with a label after the block.
    <Push condition>
    FalseJump AfterIfLabel
    <Then block>
    AfterIfLabel
  IfElse: push condition, consume condition with FalseJump to the else block, with a label on the else block, a label after the else block, and a unconditional jump from the end of the then block.
    <Push condition>
    FalseJump ElseLabel
    <Then block>
    UnconditionalJump AfterIfLabel
    ElseLabel
    <Else block>
    AfterIfLabel
  While: push condition, consume condition, FalseJump to a label after the while block, label on the while condition, at the end of the while block, unconditional jump to the while condition.
    WhileLabel
    <Condition>
    FalseJump AfterWhileLabel
    <Body>
    UnconditionalJump WhileLabel
    AfterWhileLabel
  Assignment: push the variable's address, push the expression's value, then store inside the variable's address, which is constant throughout the program, as all variables are defined once and for all.
  An intermediate pass, assigning an address for each variable.
  data AddressedVar
    Push var's address
    Push expr.'s value
    Store
----

If:
  condition: [PCode]
  then: [PCode]
IfElse:
  condition: [PCode]  
  then: [PCode]
  else: [PCode]
While:
  condition: [PCode]  
  body: [PCode]
Intermediate:
  [ [PCode] | If | IfElse | While ]

The main difference of this seperation against one loop:
seperation: genIf(If, label) -> [PCode]
one loop:   Gen[Label] -> [l1, l2, l3, ...]
best of both worlds: inline the class definitions:
            genIf(condition: [PCode], then: [PCode], label: String)

----

Should the label generator be functional?
Against functional: ALOT simpler code.
  Can simulate list too via an interface of getNextLabel(), initialize at the start.
Usage:
  genCode(LabelGenerator){
    genIf(LabelGenerator){ getNextAfterIfLabel() } // 0
    genIf(LabelGenerator){ getNextAfterIfLabel() } // 1
    genIfElse(LabelGenerator){
      getNextAfterIfElseLabel() // 2
      getNextElseLabel()
    }
    ...
  }
  
For functional: 
  Can simulate from every point in the computation. <- not really a big pro.
Usage:
  genCode(LabelGenerator, structure: [Structure]){
    (code, nextGen) = gen(LabelGenerator, head(structure))
    code ++ genCode(nextGen, tail(structure))
  }

----

Switch:
expr of type Int
A list of cases, in each, a list of statements.
  Cases in order.
1. push eval (-expr)
2. IXJ switch_end
3*. Label case_i: content, UJP switch_end
4*. UJP case_n-i (in reverse order)
5. Label switch_end.
